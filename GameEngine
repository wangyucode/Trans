package cn.wycode.openbrick.engine;

import android.graphics.Canvas;
import android.graphics.Color;
import android.util.Log;
import android.view.MotionEvent;

import cn.wycode.openbrick.engine.animation.BaseAnimation;
import cn.wycode.openbrick.engine.animation.MoveAnimation;
import cn.wycode.openbrick.engine.sprite.BaseSprite;
import cn.wycode.openbrick.engine.utils.ScreenInfo;

/**
 * Created by wy
 * on 2016/12/29.
 */

public class BrickDemo extends GameEngine {

    private final String TAG = getClass().getSimpleName();

    private BaseSprite ball, bat;

    private int degree = -32;
    private int speed = 50;

    private int lastReach = BaseSprite.BOUND_NULL;

    @Override
    public void init() {
        setShowFps(true);
    }

    @Override
    public void load() {

        int row = 5;
        int column = 10;
        float gap = 4;
        float w = (ScreenInfo.width - ((column + 1) * gap)) / column;
        gap += (ScreenInfo.width - w * column - gap * (column + 1)) / (column + 1);
        int h = 10;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++) {
                BaseSprite brick = new BaseSprite(gap + (w + gap) * j, gap + (h + gap) * i, w, h);
                brick.setBackgroundColor(Color.YELLOW);
                brick.setName("brick");
                addSprite(brick);
            }
        }


        ball = new BaseSprite(ScreenInfo.center.x, ScreenInfo.center.y, 10, 10);
        ball.setName("ball");
        BaseAnimation a = new MoveAnimation(degree, speed);
        a.setTag("move");
        ball.addAnimation(a);
        addSprite(ball);

        int batWidth = 30;
        bat = new BaseSprite(ScreenInfo.center.x - batWidth / 2, ScreenInfo.height - 10, batWidth, 5);
        bat.setBackgroundColor(Color.BLUE);
        bat.setName("bat");
        addSprite(bat);
    }

    @Override
    public void draw(Canvas canvas) {

    }

    @Override
    public void update() {
        if (lastReach == ball.reachedScreenBound()) {
            return;
        }
        lastReach = ball.reachedScreenBound();
        MoveAnimation a;
        switch (lastReach) {
            case BaseSprite.BOUND_LEFT:
            case BaseSprite.BOUND_RIGHT:
                a = (MoveAnimation) ball.findAnimationByTag("move");
                degree = 180 - degree;
                a.setDegree(degree);
                break;
            case BaseSprite.BOUND_TOP:
            case BaseSprite.BOUND_BOTTOM:
                a = (MoveAnimation) ball.findAnimationByTag("move");
                degree = -degree;
                a.setDegree(degree);
                break;
        }
    }

    @Override
    public void collided(BaseSprite a, BaseSprite b) {
        float xIn = Math.abs(a.getW() - Math.abs(a.getX() - b.getX()));
        float yIn = Math.abs(a.getH() - Math.abs(a.getY() - b.getY()));
        if (xIn > yIn) {
            MoveAnimation animation = (MoveAnimation) ball.findAnimationByTag("move");
            degree = - degree;
            animation.setDegree(degree);
        } else {
            MoveAnimation animation = (MoveAnimation) ball.findAnimationByTag("move");
            degree = 180-degree;
            animation.setDegree(degree);
        }
//        if (a.getName().equals("brick")) {
//            a.setAlive(false);
//        }
//        if (b.getName().equals("brick")) {
//            b.setAlive(false);
//        }
    }

    @Override
    public void touch(MotionEvent event) {

    }
}




package cn.wycode.openbrick.engine;

import android.app.Activity;
import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.nfc.Tag;
import android.os.Bundle;
import android.os.PowerManager;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.WindowManager;

import java.util.ArrayList;
import java.util.concurrent.CopyOnWriteArrayList;

import cn.wycode.openbrick.R;
import cn.wycode.openbrick.engine.sprite.BaseSprite;
import cn.wycode.openbrick.engine.utils.ScreenInfo;
import cn.wycode.openbrick.engine.utils.Timer;


/**
 * 游戏引擎
 *
 * @author wycode
 * @date 2016年12月29日18:18:24
 * <p>
 * 继承此类，复写相应方法
 */
public abstract class GameEngine extends Activity implements Runnable, View.OnTouchListener, SurfaceHolder.Callback {

    private final String TAG = "Engine";

    private SurfaceView mSurfaceView;
    private Canvas mCanvas;
    private static final int LOADING_DELAY = 2000;
    private boolean isGaming;
    private boolean isPause;
    private int backgroundColor = Color.DKGRAY;
    private int logoBgColor = Color.parseColor("#34495E");
    private int logoTextColor = Color.parseColor("#1ABC9C");
    private Paint logoPaint;

    private boolean isShowFps;
    private int maxFps = 60;
    private Paint redPaint;


    private PowerManager.WakeLock wakeLock;

    /**
     * 精灵对象池
     */
    private CopyOnWriteArrayList<BaseSprite> spritePool;
    /**
     * 可回收精灵对象池
     */
    private CopyOnWriteArrayList<BaseSprite> spriteRecyclePool;

    /**
     * 在setContentView之前调用
     * 主要用于初始化Activity属性等
     */
    public abstract void init();

    /**
     * 在setContentView之后调用
     * 主要加载资源
     */
    public abstract void load();

    /**
     * 在绘制精灵之前调用
     * 主要用于刷新游戏背景
     *
     * @param canvas 游戏画布
     */
    public abstract void draw(Canvas canvas);

    /**
     * 每帧循环时调用
     * 用于刷新精灵属性
     */
    public abstract void update();

    /**
     * 每帧循环时调用
     * 碰撞回调
     */
    public abstract void collided(BaseSprite a, BaseSprite b);

    /**
     * Touch事件回调
     *
     * @param event MotionEvent
     */
    public abstract void touch(MotionEvent event);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);

        initEngine();
        init();

        mSurfaceView = new SurfaceView(this);
        setContentView(mSurfaceView);

        mSurfaceView.getHolder().addCallback(this);
        mSurfaceView.setOnTouchListener(this);
        mSurfaceView.setKeepScreenOn(true);

        load();
    }

    private void initEngine() {
        ScreenInfo.init(this);
        redPaint = new Paint();
        redPaint.setColor(Color.RED);
        logoPaint = new Paint();
        logoPaint.setAntiAlias(true);
        logoPaint.setColor(logoTextColor);
        spritePool = new CopyOnWriteArrayList<>();
        spriteRecyclePool = new CopyOnWriteArrayList<>();
    }

    @Override
    protected void onResume() {
        super.onResume();
        isPause = false;
    }

    @Override
    protected void onPause() {
        super.onPause();
        isPause = true;
    }

    @Override
    public boolean onTouch(View view, MotionEvent motionEvent) {
        touch(motionEvent);
        return true;
    }

    @Override
    public void run() {
        int frameCount = 0;
        int fps = 0;
        Timer frameTimer = new Timer();

        while (isGaming) {
            if (isPause) continue;

            long frameStart = System.currentTimeMillis();

            frameCount++;
            if (frameTimer.elapse(1000)) {
                fps = frameCount;
                frameCount = 0;
            }

            update();

            for (int i = 0; i < spritePool.size() - 1; i++) {
                BaseSprite s1 = spritePool.get(i);
                for (int j = i + 1; j < spritePool.size(); j++) {
                    BaseSprite s2 = spritePool.get(j);
                    if (s1 == s2) continue;
                    if (!s1.isCollidable() || !s2.isCollidable()) continue;
                    if (!s1.isAlive() || !s2.isAlive()) continue;

                    if (s1.getCollisionRect().intersect(s1.getCollisionRect())) {
                        collided(s1, s2);
                    }
                }
            }

            if (beginDraw()) {
                mCanvas.drawColor(backgroundColor);
                draw(mCanvas);

                for (BaseSprite sprite : spritePool) {
                    if (sprite.isAlive()) {
                        sprite.animation();
//                        Log.v(TAG,"draw sprite:x="+sprite.getX()+",y="+sprite.getY());
                        sprite.draw(mCanvas);
                    } else {
                        spritePool.remove(sprite);
                        sprite.removeAllAnimation();
                        spriteRecyclePool.add(sprite);
                    }
                }

                if (isShowFps) {
                    mCanvas.drawText("FPS:" + fps, 0, redPaint.getTextSize(), redPaint);
                }
                endDraw();
            }


            long frameEnd = System.currentTimeMillis();
            long frameTime = frameEnd - frameStart;
            if (frameTime > 1000 / maxFps) {
                try {
                    Thread.sleep(frameTime - 1000 / maxFps);
                } catch (InterruptedException e) {
                    //ignore this
                }
            }
        }
        finish();
    }

    private boolean beginDraw() {
        if (mSurfaceView.getHolder().getSurface().isValid()) {
            mCanvas = mSurfaceView.getHolder().lockCanvas();
            return true;
        }
        return false;
    }

    private void endDraw() {
        mSurfaceView.getHolder().unlockCanvasAndPost(mCanvas);
    }

    public void setShowFps(boolean showFps) {
        isShowFps = showFps;
    }

    public void addSprite(BaseSprite sprite) {
        spritePool.add(sprite);
    }


    @Override
    public void surfaceCreated(SurfaceHolder holder) {
        Log.d(TAG, "surfaceDestroyed");
        beginDraw();
        mCanvas.drawColor(logoBgColor);
        mCanvas.drawText("Powered by wycode.cn", 10, ScreenInfo.height - 10, logoPaint);
        endDraw();
        final Thread gameThread = new Thread(this);
        mSurfaceView.postDelayed(new Runnable() {
            @Override
            public void run() {
                isGaming = true;
                gameThread.start();
            }
        }, LOADING_DELAY);
    }

    @Override
    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {
        Log.d(TAG, "surfaceChanged:width=" + width + ",height=" + height);
    }

    @Override
    public void surfaceDestroyed(SurfaceHolder holder) {
        Log.d(TAG, "surfaceDestroyed");
        finish();
    }
}






package cn.wycode.openbrick.engine.utils;

import android.content.Context;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.RectF;

/**
 * Created by wWX383516 on 2016/12/29.
 */

public class ScreenInfo {

    public static Point center;
    public static int width;
    public static int height;
    public static float density;

    public static RectF screenRect;

    //不能构造此类对象
    private ScreenInfo(){

    }

    public static void init(Context context){
        density = context.getResources().getDisplayMetrics().density;
        width = context.getResources().getDisplayMetrics().widthPixels;
        height = context.getResources().getDisplayMetrics().heightPixels;
        center = new Point(width / 2, height / 2);
        screenRect = new RectF(0,0,width,height);
    }

}




package cn.wycode.openbrick.engine.utils;


public class Timer {

    private long startCount;

    public Timer() {
        startCount = System.currentTimeMillis();
    }

    public boolean elapse(int ms) {
        if (System.currentTimeMillis() - startCount > ms) {
            reset();
            return true;
        } else {
            return false;
        }
    }

    public void reset() {
        startCount = System.currentTimeMillis();
    }

    public long getElapse() {
        long dt = System.currentTimeMillis() - startCount;
        reset();
        return dt;
    }
}




package cn.wycode.openbrick.engine.animation;

import cn.wycode.openbrick.engine.sprite.BaseSprite;
import cn.wycode.openbrick.engine.utils.Timer;

/**
 * Created by wy
 * on 2016/12/30.
 */

public abstract class BaseAnimation {
    protected final String TAG = getClass().getSimpleName();

    protected Timer animTimer;
    protected BaseSprite sprite;
    private boolean isDone;
    protected boolean isLoop;

    private Object tag;

    public Object getTag() {
        return tag;
    }

    public void setTag(Object tag) {
        this.tag = tag;
    }

    BaseAnimation(){
        animTimer = new Timer();
    }

    public abstract void adjustChanges(BaseSprite sprite);

    public boolean isDone() {
        return isDone;
    }

    public void setDone(boolean done) {
        isDone = done;
    }

    public boolean isLoop() {
        return isLoop;
    }

    public void setLoop(boolean loop) {
        isLoop = loop;
    }
}





package cn.wycode.openbrick.engine.animation;

import android.util.Log;

import cn.wycode.openbrick.engine.sprite.BaseSprite;

/**
 * Created by wy
 * on 2016/12/30.
 */

public class MoveAnimation extends BaseAnimation {

    private float startX, startY, toX, toY;

    private float speed;

    private float degree;

    private Type type;

    private enum Type {
        TO_XY_SPEED, DEGREE_SPEED
    }

    public MoveAnimation(int toX, int toY, float speed) {
        super();
        this.toX = toX;
        this.toY = toY;
        this.speed = speed;

        this.type = Type.TO_XY_SPEED;
    }

    public MoveAnimation(float degree, float speed) {
        super();
        this.speed = speed;
        this.degree = degree;

        this.type = Type.DEGREE_SPEED;
    }


    @Override
    public void adjustChanges(BaseSprite sprite) {
        if (this.sprite == null) {
            this.sprite = sprite;
            this.startX = sprite.getX();
            this.startY = sprite.getY();
            animTimer.reset();
        }
        double vX, vY, x, y;
        long dt;
        switch (type) {
            case TO_XY_SPEED:
                double s = Math.sqrt(Math.pow(toX - sprite.getX(), 2) + Math.pow(toY - sprite.getY(), 2));
                double t = s / speed;
                vX = (toX - sprite.getX()) / t;
                vY = (toY - sprite.getY()) / t;
                dt = animTimer.getElapse();
                x = sprite.getX() + vX * dt / 1000;
                y = sprite.getY() + vY * dt / 1000;
                if (toX - startX > 0) {
                    if (x > toX) {
                        x = toX;
                        y = toY;
                        setDone(true);
                    }
                } else {
                    if (x < toX) {
                        x = toX;
                        y = toY;
                        setDone(true);
                    }
                }
                sprite.setX((float) x);
                sprite.setY((float) y);
                break;

            case DEGREE_SPEED:
                vX = Math.cos(Math.toRadians(degree)) * speed;
                vY = Math.sin(Math.toRadians(degree)) * speed;
                dt = animTimer.getElapse();

                x = sprite.getX() + vX * dt / 1000;
                y = sprite.getY() + vY * dt / 1000;
                sprite.setX((float) x);
                sprite.setY((float) y);
                break;
        }

    }

    public float getDegree() {
        return degree;
    }

    public void setDegree(float degree) {
        this.degree = degree;
    }
}




package cn.wycode.openbrick.engine.sprite;

import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.RectF;
import android.util.Log;

import java.util.concurrent.CopyOnWriteArrayList;

import cn.wycode.openbrick.engine.animation.BaseAnimation;
import cn.wycode.openbrick.engine.utils.ScreenInfo;

/**
 * Created by wy
 * on 2016/12/30.
 */

public class BaseSprite implements SpriteAction {

    private final String TAG = getClass().getSimpleName();

    private String name;
    private boolean isAlive;
    private boolean collidable = true;
    private Bitmap image;

    private RectF boundRect,collisionRect;
    private float x, y, w, h, centerX, centerY;

    private int backgroundColor = Color.GREEN;
    private Paint bgPaint;

    private CopyOnWriteArrayList<BaseAnimation> animations;

    public BaseSprite(float w, float h) {
        this(null, 0, 0, w, h);
    }

    public BaseSprite(float x, float y, float w, float h) {
        this(null, x, y, w, h);
    }

    public BaseSprite(Bitmap b, float x, float y, float w, float h) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
        this.boundRect = new RectF(x, y, x + w, y + h);
        this.collisionRect = boundRect;

        this.bgPaint = new Paint();
        this.isAlive = true;
        bgPaint.setColor(backgroundColor);
        bgPaint.setStyle(Paint.Style.FILL);

        animations = new CopyOnWriteArrayList<>();
    }


    @Override
    public void draw(Canvas c) {
        c.drawRect(boundRect, bgPaint);
    }

    @Override
    public void animation() {
        for (BaseAnimation a : animations) {
            if (!a.isDone()) {
                a.adjustChanges(this);
            }

        }
    }

    public void addAnimation(BaseAnimation a) {
        animations.add(a);
    }

    public void removeAllAnimation() {
        animations.clear();
    }

    public BaseAnimation findAnimationByTag(Object tag){
        for (BaseAnimation a : animations) {
            if(a.getTag().equals(tag)){
                return a;
            }
        }
        return null;
    }

    public static final int BOUND_LEFT = 1;
    public static final int BOUND_TOP = 2;
    public static final int BOUND_RIGHT = 3;
    public static final int BOUND_BOTTOM = 4;
    public static final int BOUND_NULL = 0;

    public int reachedScreenBound() {
        int bound;

        if (boundRect.left < ScreenInfo.screenRect.left) {
            bound = BOUND_LEFT;
        } else if (boundRect.top < ScreenInfo.screenRect.top) {
            bound = BOUND_TOP;
        } else if (boundRect.right > ScreenInfo.screenRect.right) {
            bound = BOUND_RIGHT;
        } else if (boundRect.bottom > ScreenInfo.screenRect.bottom) {
            bound = BOUND_BOTTOM;
        }else{
            bound = BOUND_NULL;
        }
        return bound;
    }

    public boolean isOutSideScreen() {
        return !RectF.intersects(ScreenInfo.screenRect, boundRect);
    }


    public boolean isAlive() {
        return isAlive;
    }

    public void setAlive(boolean alive) {
        isAlive = alive;
    }

    public boolean isCollidable() {
        return collidable;
    }

    public void setCollidable(boolean collidable) {
        this.collidable = collidable;
    }

    public Bitmap getImage() {
        return image;
    }

    public void setImage(Bitmap image) {
        this.image = image;
    }

    public float getW() {
        return boundRect.width();
    }

    public void setW(int w) {
        boundRect.right = boundRect.left + w;
        this.w = w;
    }

    public float getX() {
        return boundRect.left;
    }

    public void setX(float x) {
        if (this.x == x) {
            return;
        }
        boundRect.left = x;
        boundRect.right = x + w;
    }

    public float getY() {
        return boundRect.top;
    }

    public void setY(float y) {
        if (this.y == y) {
            return;
        }
        boundRect.top = y;
        boundRect.bottom = y + h;
    }

    public float getH() {
        return boundRect.height();
    }

    public void setH(int h) {
        boundRect.bottom = boundRect.top + h;
        this.h = h;
    }

    public float getCenterX() {
        return boundRect.centerX();
    }

    public float getCenterY() {
        return boundRect.centerY();
    }

    public int getBackgroundColor() {
        return backgroundColor;
    }

    public void setBackgroundColor(int backgroundColor) {
        this.backgroundColor = backgroundColor;
        this.bgPaint.setColor(backgroundColor);
    }

    public RectF getBoundRect() {
        return boundRect;
    }

    public RectF getCollisionRect() {
        return collisionRect;
    }

    public void setCollisionRect(RectF collisionRect) {
        this.collisionRect = collisionRect;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}




package cn.wycode.openbrick.engine.sprite;

import android.graphics.Canvas;

/**
 * Created by wy
 * on 2016/12/30.
 */

public interface SpriteAction {

    void draw(Canvas c);
    void animation();
}
